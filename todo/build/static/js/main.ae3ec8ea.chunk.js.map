{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","state","setState","id","title","complete","active","setActive","edit","setEdit","fetchTask","fetch","then","response","json","data","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","useEffect","tasklist","map","item","index","key","className","onClick","task","completed","csrftoken","console","log","url","method","headers","body","JSON","stringify","strikeUnstrike","style","flex","startEdit","startDelete","onSubmit","event","preventDefault","catch","error","onChange","target","value","type","placeholder","getElementById","reset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ae3ec8ea.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport './App.css';\n\nfunction App() {\n\n\n  const [state, setState] = useState([])\n  // there were errrors, you had to remove the propretive activeitems and make it his own state\n  const [active, setActive] = useState({\n    id: null,\n    title: '',\n    complete: false\n  })\n  const [edit, setEdit] = useState(false)\n\n  // you won't be able to fetch data from this API because you need to white list it . CHeck django cors.headers\n\n\n\n\n  const fetchTask = () => {\n    fetch('https://guarded-shore-23074.herokuapp.com/api/task-list/')\n      .then(response => response.json())\n      .then(data => setState(\n        data\n      ))\n  }\n\n\n\n\n\n  const handleChange = (event) => {\n    let name = event.target.name\n    let value = event.target.value\n    setActive({\n      ...active,\n      title: value\n    })\n  }\n\n\n\n\n  const handleSubmit = (event) => {\n    let csrftoken = getCookie('csrftoken')\n    event.preventDefault()\n    console.log(active)\n    let url = 'https://guarded-shore-23074.herokuapp.com/api/task-create/'\n    if (edit === true) {\n      // REMEMBER THE LOGIC \n      url = `https://guarded-shore-23074.herokuapp.com/api/task-update/${active.id}`\n      setEdit(false)\n    }\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': \"application/json\",\n        'X-CSRFToken': csrftoken\n      },\n      body: JSON.stringify(active)\n    }).then((response) => {\n      fetchTask()\n      setState(\n        // you had an error here , the item added was added as an object but not in the array, you had to had the [] !\n        [active]\n      )\n    })\n      .catch(error => {\n        console.log('error', error)\n      })\n  }\n\n\n  const getCookie = name => {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n      var cookies = document.cookie.split(';');\n      for (var i = 0; i < cookies.length; i++) {\n        var cookie = cookies[i].trim();\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) === (name + '=')) {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  }\n\n\n\n  useEffect(() => {\n    fetchTask()\n  }, []);\n\n\n\n  const startEdit = (task) => {\n    setActive(task)\n    setEdit(true)\n  }\n\n\n\n  const startDelete = (task) => {\n    let csrftoken = getCookie('csrftoken')\n    fetch(`https://guarded-shore-23074.herokuapp.com/api/task-delete/${task.id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': \"application/json\",\n        'X-CSRFToken': csrftoken\n      }\n    }).then(response => {\n      fetchTask()\n    })\n  }\n\n  const strikeUnstrike = task => {\n    task.completed = !task.completed\n    let csrftoken = getCookie('csrftoken')\n    // we aslo need to update the database\n    console.log(\"TASK\" , task.completed)\n    let url = `https://guarded-shore-23074.herokuapp.com/api/task-update/${task.id}`\n    fetch (url, {\n      method:'POST',\n      headers:{\n        'Content-Type': \"application/json\",\n        'X-CSRFToken': csrftoken\n      },\n      body:JSON.stringify({'completed':task.completed, \"title\":task.title})\n    }).then (() => {\n      fetchTask()\n    })\n  }\n\n  const cancelCourse = () => { \n    document.getElementById(\"form\").reset();\n  }\n\n\n  let task = state\n  let tasklist = task.map((item, index) => (\n    <div  key={index} className=\"task-wrapper flex-wrapper\">\n      <div onClick={() => strikeUnstrike(item)} style={{ flex: 7 }}>\n        {item.completed == false ? (<span>{item.title}</span>) : (<strike>{item.title}</strike>)}\n      </div>\n      <div style={{ flex: 1 }}>\n        {/* the reason why we need to use an arrow function is because we need to pass a parameter and the parameter is what comes after \"map\" , above !!!*/}\n        <button onClick={() => startEdit(item)} className=\"btn btn-smn btn-outline-info\"> Edit </button>\n      </div>\n      <div style={{ flex: 1 }}>\n        <button onClick={() => startDelete(item)} className=\"btn btn-smn btn-outline-dark delete\"> -  </button>\n      </div>\n    </div>))\n  return (\n    <div className=\"container\">\n      <div id=\"task-container\">\n        <div id=\"form-wrapper\">\n          <form  onSubmit={handleSubmit}  id=\"form\">\n            <div  className=\"flex-wrapper\">\n              <div style={{ flex: 6 }}>\n                {/* you had to put value = active title to make it appear on the bar */}\n                <input id=\"title\" onChange={handleChange} type=\"text\" className=\"form-control\" value = {active.title} name=\"title\" placeholder=\"Add task\" />\n              </div>\n              <div style={{ flex: 1 }}>\n                <button id=\"submit\" onClick ={cancelCourse} type=\"submit\" className=\"btn btn-warning\" name=\"submit\" >Submit</button>\n              </div>\n            </div>\n          </form>\n        </div>\n        <div id=\"list-wrapper\">\n          {tasklist}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}